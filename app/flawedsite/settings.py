"""
Django settings for flawedsite project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import time
import datetime
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-x%n-%&3hm)t@2+oi+(%!a_9r5h$w)le8b+sa2o_hwygij)ot5^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# LOGGING SETTINGS
# --------------------------


def create_logger_format(header="", content="{message}"):
    return "{asctime} {levelname} " + header + "\n\t" + content + "\n"


base_fmt = create_logger_format()
verbose_fmt = create_logger_format(header="{name} {funcname}")
debug_fmt = create_logger_format(header="path:{pathname}:{lineno} function:{funcname}")

hour_timestamp = time.strftime("%Y%m%d%H", time.gmtime())

root_handlers = ["console", "file"]
if DEBUG:
    root_handlers.append("debug")

base_path = BASE_DIR
logs_path = base_path / "logs"
logs_path.mkdir(exist_ok=True)
debug_path = logs_path / "debug"
debug_path.mkdir(exist_ok=True)

format_defaults = dict(funcname="top level")


class GMTFormatter(logging.Formatter):
    converter = time.gmtime

    def formatTime(self, record, datefmt=None):
        if datefmt is None:
            return datetime.datetime.fromtimestamp(
                record.created, datetime.UTC
            ).isoformat()
        else:
            struct_time = self.converter(record.created)
            return time.strftime(datefmt, struct_time)


module_parents = "flawedsite.settings"
formatter_path = module_parents + "." + GMTFormatter.__qualname__
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "base": {
            "()": formatter_path,
            "format": base_fmt,
            "style": "{",
        },
        "verbose": {
            "()": formatter_path,
            "format": verbose_fmt,
            "style": "{",
            "defaults": format_defaults,
        },
        "debug": {
            "()": formatter_path,
            "format": debug_fmt,
            "style": "{",
            "defaults": format_defaults,
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": "INFO" if DEBUG else "WARNING",
            "formatter": "base",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": f"{logs_path.absolute()}/{hour_timestamp}.log",
            "encoding": "utf-8",
            "level": "INFO",
            "formatter": "verbose",
        },
        "debug": {
            "class": "logging.FileHandler",
            "filename": f"{debug_path.absolute()}/{hour_timestamp}.log",
            "encoding": "utf-8",
            "level": "DEBUG",
            "formatter": "debug",
        },
    },
    "root": {"handlers": root_handlers, "level": "DEBUG"},
}

# LOGGING SETTINGS
# =========================

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "app.apps.AppConfig",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'flawedsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'flawedsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = "login/"
LOGIN_REDIRECT_URL = "/"
